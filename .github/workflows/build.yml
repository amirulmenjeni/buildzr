name: build

on:
  workflow_dispatch:
  pull_request:
    types:
      - opened
      - synchronize
    branches:
      - master

jobs:
  check_changes:
    runs-on: ubuntu-latest
    outputs:
      src: ${{ steps.check-src-changed.outputs.changes.src }}
      docs: ${{ steps.check-src-changed.outputs.changes.docs }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.base.sha }}
      - uses: dorny/paths-filter@v3
        id: check-src-changed
        with:
          filters: |
            src:
              - 'buildzr/**'
              - 'tests/**'
            docs:
              - 'README.md'

  check_skip_flags:
    runs-on: ubuntu-latest
    outputs:
      head-commit-message: ${{ steps.get-head-commit-message.outputs.commit_message }}
    steps:
      - name: Get repo
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Get HEAD commit message
        id: get-head-commit-message
        run: echo "::set-output name=commit_message::$(git log --format=%B -n 1)"

  commitlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: wagoid/commitlint-github-action@v6

  tests:
    runs-on: ubuntu-latest
    needs:
      - check_skip_flags
      - commitlint
      - check_changes

    if: ${{ !contains(needs.check_skip_flags.outputs.head-commit-message, '[skip-ci]') && needs.check_changes.outputs.src == 'true' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.base.sha }}

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Set up miniforge
      uses: conda-incubator/setup-miniconda@v3
      with:
        miniforge-version: 'latest'
        activate-environment: buildzr-dev
        environment-file: environment.yml

    - name: Verify environment
      shell: bash -l {0}
      run: |
        conda info
        conda list

    - name: Run tests
      shell: bash -l {0}
      run: |
        # `test_workspaces.py` is useful during development, but not necessary for CI.
        # Plus, it depends on Java and Structurizr CLI, which are not
        # installed in the CI environment.
        pytest --ignore tests/test_workspaces.py

  build:
    runs-on: ubuntu-latest
    needs:
      - check_changes

    if: |
      ${{ needs.check_changes.outputs.src == 'true' || needs.check_changes.outputs.docs == 'true' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0 # Get full history and tags
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Install dependencies for building the package
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade build

    - name: Install Hatch
      uses: pypa/hatch@install

    # Note: See https://github.com/PaulHatch/semantic-version?tab=readme-ov-file#outputs
    # for the full list of outputs.
    - name: Get semantic version
      uses: paulhatch/semantic-version@v5.4.0
      id: semantic-version
      env:
        PRERELEASE_MODE: true
      with:
        tag_prefix: "v"

        # e.g., `feat(scope)!:` or `feat!:`
        major_pattern: "/^\\w+(\\(.+\\))?!:/"
        major_regexp_flags: ""

        # If PRERELEASE_MODE is true, then the minor version is bumped for `fix` and `docs` as well.
        minor_pattern: ${{ env.PRERELEASE_MODE && '/^(feat|fix|docs)(?:\(.+\))?:/' || '/^feat(?:\(.+\))?:/' }}
        minor_regexp_flags: ""

        # Follow default hatch versioning format.
        # See: https://hatch.pypa.io/1.9/version/#supported-segments
        version_format: "v${major}.${minor}.${patch}.dev${increment}"
        bump_each_commit: false
        bump_each_commit_patch_pattern: ""
        search_commit_body: false
        user_format_type: "csv"
        enable_prerelease_mode: ${{ env.PRERELEASE_MODE }}
        debug: false
        version_from_branch: false

    - name: Display semantic version debug output
      if: ${{ steps.semantic-version.outputs.debug_output != null }}
      run: |
        jq <<< '${{ steps.semantic-version.outputs.debug_output }}'

    - name: Update Version
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        version: ${{ steps.semantic-version.outputs.version }}
      run: |
        hatch version $version
        NEW_VERSION=$(hatch version)

        git remote set-url --push origin https://amirulmenjeni:${GITHUB_TOKEN}@github.com/amirulmenjeni/buildzr.git

        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"

        git add buildzr/__about__.py
        git commit -m "ci: [skip-ci] Update version to $NEW_VERSION"

        git push origin HEAD:${{ github.head_ref }}

    - name: Build package
      run: |
        python -m build

    - name: Upload build
      uses: actions/upload-artifact@v4
      with:
        name: build
        path: dist/

    - name: Display uploaded artifacts
      run: |
        ls -R